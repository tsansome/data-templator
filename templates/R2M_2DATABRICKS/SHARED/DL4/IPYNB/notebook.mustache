        {
            "cell_type": "code",
            "source": [
                "sdf = spark.sql(\"\"\"\nSELECT \n{{#source.date_columns}}to_utc_timestamp(CAST(UNIX_TIMESTAMP(`{{name}}`, \\\{{ source.date_format }}\\\) AS TIMESTAMP), {{ source.date_locale }}) AS `{{name_without_spaces}}_UTC,\n{{/source.date_columns}}{{#columns}}\tTRIM(m.`{{name}}`) as `{{name_without_spaces}}`{{/columns}}\tcurrent_timestamp() AS run_date_utc\n   FROM myRecords AS m\n\"\"\")\nsdf.createOrReplaceTempView(\"sdf\")"
            ],
            "metadata": {},
            "outputs": [],
            "execution_count": null
        },
        {
            "cell_type": "code",
            "source": [
                "from pyspark.sql import functions as f\n\ncolumns = [x for x in sdf.columns if str(x) != \"run_date_utc\"]\n\nsdf.select(col(\"*\"), concat(f.concat_ws('', *columns)).alias(\"Data\")).registerTempTable(\"sdf\")"
            ],
            "metadata": {},
            "outputs": [],
            "execution_count": 4
        },
        {
            "cell_type": "code",
            "source": [
                "%sql\n-- DROP TABLE {{target.database}}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }};\nCREATE TABLE IF NOT EXISTS {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}}(\n  {{#source.date_columns}}\t`{{name_without_spaces}}_UTC` datetime{{^last}},\n {{/last}}{{ source.date_locale }}) AS `{{name}}_UTC,\n{{/source.date_columns}}{{#columns}}\t`{{name_without_spaces}}` string{{^last}},\n {{/last}}{{/columns}},\n  `run_date_utc` timestamp,\n  `Data` string,\n isactive string,\n  validFrom string,\n validTo string\n)\n    USING PARQUET\n    REFRESH TABLE {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}};"
            ],
            "metadata": {},
            "outputs": [],
            "execution_count": 5
        },
        {
            "cell_type": "code",
            "source": [
                "%sql\ndrop table if exists {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}}_new;\ncreate table if not exists {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}}_new(\n  {{#source.date_columns}}\t`{{name_without_spaces}}_UTC` datetime{{^last}},\n {{/last}}{{/source.date_columns}}{{#columns}}\t`{{name_without_spaces}}` string{{^last}},\n {{/last}}{{/columns}},\n  `run_date_utc` timestamp,\n  `Data` string,\n  isactive string,\n  validFrom string,\n validTo string\n  \n) using PARQUET;"
            ],
            "metadata": {},
            "outputs": [],
            "execution_count": 6
        },
        {
            "cell_type": "code",
            "source": [
                "%sql\n--insert union into new table (result of updates/inserts )\nInsert into {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}}_new\n--select all rows in existing table where the key is not in the new table\nSelect -- {A}-{B} \n  x.*\nfrom {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}} as x\nleft anti join sdf T on {{#source.primary_key}}x.{{name_without_spaces}} = t.{{name_without_spaces}}{{^last}} and {{/last}}{{/source.primary_key}}\nunion \n--select all rows in the new table\nselect -- {B} - {A}\n  t.*\n  , 1 as isactive\n  , current_date() as validFrom\n  , '01-01-9999' as validTo\nfrom sdf t\nleft anti join {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}} x on {{#source.primary_key}}x.{{name_without_spaces}} = t.{{name_without_spaces}}{{^last}} and {{/last}}{{/source.primary_key}}\n\n-- no change in intersection\nunion\nselect \n  x.*\nfrom {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}} as x\ninner join sdf T on {{#source.primary_key}}x.{{name_without_spaces}} = t.{{name_without_spaces}}{{^last}} and {{/last}}{{/source.primary_key}}\nwhere x.`data`= t.`data`\n\n-- updates in intersection\nunion\nselect\n  t.*, \n  1 as isactive\n  , current_date() as validFrom\n  , '01-01-9999' as validTo\nfrom sdf t\ninner join {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}} as x on {{#source.primary_key}}x.{{name_without_spaces}} = t.{{name_without_spaces}}{{^last}} and {{/last}}{{/source.primary_key}}\nwhere x.`data` <> t.`data` and x.`isactive` = 1\n\n--Soft delete from intersection\nunion\nselect -- {A}n{B}\n-- x.*  except for isactive and valid to\n  {{#columns}}\tx.`{{name_without_spaces}}` string{{^last}},\n {{/last}}{{/columns}},\n  x.`run_date_utc`,\n  x.`Data`,\n  0 as isactive,\n  x.`validFrom`,\n  current_date() as validTo\nfrom {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}} as x\ninner join sdf T on {{#source.primary_key}}x.{{name_without_spaces}} = t.{{name_without_spaces}}{{^last}} and {{/last}}{{/source.primary_key}}\nwhere x.`data` <> t.`data`\n--"
            ],
            "metadata": {},
            "outputs": [],
            "execution_count": 7
        },
        {
            "cell_type": "code",
            "source": [
                "%sql\n--replace existing table with update table\ndrop table if exists {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}};\nalter table {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}}_new rename to {{ target.database }}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }} = Table in master to update\n-- {{target.database}}_master.{{source.database}}_{{template_config.variables.source_tablename_formatted}};"
            ],
            "metadata": {},
            "outputs": [],
            "execution_count": 8
        },
        {
            "cell_type": "code",
            "source": [
                "%sql\n\n--SELECT COUNT(*) FROM {{target.database}}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }}"
            ],
            "metadata": {},
            "outputs": [],
            "execution_count": 9
        },
        {
            "cell_type": "code",
            "source": [
                "%sql\n\n--SELECT * FROM {{target.database}}_master.{{ source.database}}_{{ template_config.variables.source_tablename_formatted }}"
            ],
            "metadata": {},
            "outputs": [],
            "execution_count": 10
        }