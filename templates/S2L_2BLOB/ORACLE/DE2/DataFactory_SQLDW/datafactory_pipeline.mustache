{
    "name": "{{ template_config.outputs.0.output_file.name }}",
    "properties": {
        "description": "A pipeline that extracts the delta of newly created rows from {{source.schema}}.{{source.tablename}} from the database {{source.database}} by comparing it to {{source.schema}}_{{template_config.variables.source_tablename_formatted}} in the target database using the Dataset reference of {{properties.sqldwsource}} in Data Factory. It then drops it into the {{target.storage_container}} using {{target.genericdataset}} as a reference for the Blob storage account.",
        "activities": [
            {
                "name": "Find Delta Maximum Value",
                "description": "Determine the maximum of the delta column {{#source.delta_column_date}}{{source.delta_column_date.name}}{{/source.delta_column_date}}{{#source.delta_column_ordinal}}{{source.delta_column_ordinal.name}}{{/source.delta_column_ordinal}} in the target database using the Dataset reference of {{properties.sqldwsource}}.",
                "type": "Lookup",
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false
                },
                "typeProperties": {
                    "source": {
                        "type": "SqlDWSource",
                        {{#source.delta_column_date}}
                        "sqlReaderQuery": "IF object_id('main.{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}','U') is not null 
	                                            SELECT CONVERT(varchar, COALESCE(MAX(Cast([{{source.delta_column_date.name}}] as datetime2)), CAST('{{#source.delta_column_date.default_if_no_rows}}{{source.delta_column_date.default_if_no_rows}}{{/source.delta_column_date.default_if_no_rows}}{{^source.delta_column_date.default_if_no_rows}}1900-01-01 00:00:00{{/source.delta_column_date.default_if_no_rows}}' as datetime2)), 120) as delta_max From [main].[{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}]
                                           ELSE 
	                                            SELECT CONVERT(varchar, CAST('{{#source.delta_column_date.default_if_no_rows}}{{source.delta_column_date.default_if_no_rows}}{{/source.delta_column_date.default_if_no_rows}}{{^source.delta_column_date.default_if_no_rows}}1900-01-01 00:00:00{{/source.delta_column_date.default_if_no_rows}}' as datetime2), 120) as delta_max"
                        {{/source.delta_column_date}}
                        {{#source.delta_column_ordinal}}
                        "sqlReaderQuery": "IF object_id('main.{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}','U') is not null 
	                                            SELECT COALESCE(MAX(CAST([{{source.delta_column_ordinal.name}}] as BIGINT)), {{#source.delta_column_ordinal.default_if_no_rows}}{{source.delta_column_ordinal.default_if_no_rows}}{{/source.delta_column_ordinal.default_if_no_rows}}{{^source.delta_column_ordinal.default_if_no_rows}}0{{/source.delta_column_ordinal.default_if_no_rows}}) as delta_max From [main].[{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}]
                                           ELSE 
	                                            SELECT {{#source.delta_column_ordinal.default_if_no_rows}}{{source.delta_column_ordinal.default_if_no_rows}}{{/source.delta_column_ordinal.default_if_no_rows}}{{^source.delta_column_ordinal.default_if_no_rows}}0{{/source.delta_column_ordinal.default_if_no_rows}} as delta_max"
                        {{/source.delta_column_ordinal}}
                    },
                    "dataset": {
                        "referenceName": "{{properties.sqldwsource}}",
                        "type": "DatasetReference"
                    }
                }
            },
            {
                "name": "Extract delta rows from source table",
                "type": "Copy",
                "description": "Execute the delta query on the source, extract results into the RAW folder {{source.schema}}_{{template_config.variables.source_tablename_formatted}} in container {{target.storage_container}}",
                "dependsOn": [
                    {
                        "activity": "Find Delta Maximum Value",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false
                },
                "typeProperties": {
                    "source": {
                        "type": "OracleSource",
                        "oracleReaderQuery": {
                            "value": "SELECT {{#source.date_columns}}\"{{name}}\" AS \"{{name_without_spaces}}\",{{/source.date_columns}}{{#columns}}REPLACE(REPLACE(\"{{name}}\", CHR(13), '    '), CHR(10), '    ') AS \"{{name_without_spaces}}\"{{^last}},{{/last}}{{/columns}} FROM {{ source.schema }}.{{ source.tablename }} \n{{#source.delta_column_date}}WHERE TO_TIMESTAMP(\"{{ source.delta_column_date.name }}\") > TO_TIMESTAMP('@{activity('Find Delta Maximum Value').output.firstRow.delta_max }','YYYY-MM-DD HH24:MI:SS'){{/source.delta_column_date}}{{#source.delta_column_ordinal}}WHERE \"{{ source.delta_column_ordinal.name }}\" > @{activity('Find Delta Maximum Value').output.firstRow.delta_max }{{/source.delta_column_ordinal}}",
                            "type": "Expression"
                        }
                    },
                    "sink": {
                        "type": "BlobSink"
                    },
                    "enableStaging": false,
                    "dataIntegrationUnits": 0
                },
                "inputs": [
                    {
                        "referenceName": "{{source.genericdataset}}",
                        "type": "DatasetReference"
                    }
                ],
                "outputs": [
                    {
                        "referenceName": "{{target.genericdataset}}",
                        "type": "DatasetReference",
                        "parameters": {
                            "subfolder": "{{source.schema}}_{{template_config.variables.source_tablename_formatted}}",
                            "filename": "@concat('out', '_rId_', pipeline().RunId, '_dt_', pipeline().TriggerTime,'.dsv')"
                        }
                    }
                ]
            },
            {
                "name": "Send Failed Email",
                "type": "WebActivity",
                "dependsOn": [
                    {
                        "activity": "Extract delta rows from source table",
                        "dependencyConditions": [
                            "Failed"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "typeProperties": {
                    "url": "{{properties.logic_app_url}}",
                    "method": "POST",
                    "headers": {
                        "Content-Type": "application/json"
                    },
                    "body": {
                        "message": "@{activity('Extract delta rows from source table').error.message}",
                        "Subject": "{{template_config.properties.dam_prefix}}_{{template_config.properties.pattern}}_{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}} failed",
                        "numberOfRecords": "0",
                        "dataFactoryName": "@{pipeline().DataFactory}",
                        "pipelineName": "@{pipeline().Pipeline}",
                        "receiver": "@pipeline().parameters.receiver",
                        "Guid": "{{properties.logic_app_secret}}"
                    }
                }
            }
        ],
        "folder": {
            "name": "{{template_config.properties.dam_prefix}}_{{template_config.properties.pattern}}"
        },
        "annotations": [
            "Templator: v{{templator_info.version}}"{{#tags}},{{/tags}}
            {{#tags}}
                {{label}}{{^last}},{{/last}}
            {{/tags}}
        ]
    }
}