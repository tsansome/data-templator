IF EXISTS(SELECT * FROM sys.objects WHERE type = 'P' AND name = '{{template_config.properties.dam_prefix}}_{{template_config.properties.pattern}}_{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}') DROP PROCEDURE {{template_config.properties.dam_prefix}}_{{template_config.properties.pattern}}_{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}};
GO
CREATE PROCEDURE dbo.{{template_config.properties.dam_prefix}}_{{template_config.properties.pattern}}_{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}
    @BLOBPATH NVARCHAR(200)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RowsInserted INT;
    DECLARE @CreateExternalTableString nvarchar(max)
    DECLARE @CreateMainTableIfNotExistsString nvarchar(max)
    DECLARE @InsertNewRowsString nvarchar(max)
    DECLARE @UpdateExistingRecordsString nvarchar(max)
    DECLARE @DropExternalTableString nvarchar(max)
    DECLARE @FindRowCountsString nvarchar(max)
    DECLARE @myid uniqueidentifier  
    SET @myid = NEWID()  

    DECLARE @counts {{properties.datatypeforcounttable}};

    SET @CreateExternalTableString = '
        CREATE EXTERNAL TABLE [dbo].[extTmp'+ CONVERT(varchar(255), @myid)  +'] (
            {{#source.date_columns}}[{{name}}] {{#hasTargetDefinition}}{{target.datatype}}{{/hasTargetDefinition}}{{^hasTargetDefinition}}{{#properties.default_datatype}}{{properties.default_datatype}}{{/properties.default_datatype}}{{^properties.default_datatype}}nvarchar(100){{/properties.default_datatype}}{{/hasTargetDefinition}},{{/source.date_columns}}{{#columns}}[{{name_without_spaces}}] {{#hasTargetDefinition}}{{target.datatype}}{{/hasTargetDefinition}}{{^hasTargetDefinition}}{{#properties.default_datatype}}{{properties.default_datatype}}{{/properties.default_datatype}}{{^properties.default_datatype}}nvarchar(100){{/properties.default_datatype}}{{/hasTargetDefinition}}{{^last}},{{/last}}{{/columns}}
        )
        WITH ( 
            LOCATION = ''' + @BLOBPATH + ''',   
            DATA_SOURCE = [{{properties.datasource}}],  
            FILE_FORMAT = [{{properties.fileformat}}],
            REJECT_TYPE = VALUE,
            REJECT_VALUE = 0
        );
    ';

    SET @CreateMainTableIfNotExistsString = '
        if object_id (''main.{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}'',''U'') is null
        CREATE TABLE [Main].[{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}] (
            {{#source.date_columns}}[{{name_without_spaces}}] {{#hasTargetDefinition}}{{target.datatype}}{{/hasTargetDefinition}}{{^hasTargetDefinition}}{{#properties.default_datatype}}{{properties.default_datatype}}{{/properties.default_datatype}}{{^properties.default_datatype}}nvarchar(100){{/properties.default_datatype}}{{/hasTargetDefinition}},{{/source.date_columns}}{{#columns}}[{{name_without_spaces}}] {{#hasTargetDefinition}}{{target.datatype}}{{/hasTargetDefinition}}{{^hasTargetDefinition}}{{#properties.default_datatype}}{{properties.default_datatype}}{{/properties.default_datatype}}{{^properties.default_datatype}}nvarchar(100){{/properties.default_datatype}}{{/hasTargetDefinition}}{{^last}},{{/last}}{{/columns}}
        ) WITH (
            DISTRIBUTION = {{properties.distribution}}{{#properties.index}},{{/properties.index}}
            {{#properties.index}}{{properties.index}}{{/properties.index}}
        );        
    ';

    SET @DropExternalTableString = '
        DROP EXTERNAL TABLE [dbo].[extTmp'+ CONVERT(varchar(255), @myid)  +'];
    ';

    SET @InsertNewRowsString = '
        INSERT INTO [main].[{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}]
        SELECT *
        FROM [dbo].[extTmp'+ CONVERT(varchar(255), @myid)  +'] Tmp
        WHERE NOT EXISTS(SELECT 1
                         FROM [main].[{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}] C
                         WHERE {{#source.primary_keys}}C.{{name_without_spaces}} = Tmp.{{name_without_spaces}}{{/source.primary_keys}}) 
        OPTION(LABEL = ''InsertNewRows_' + CONVERT(varchar(255), @myid) + ''');   
    ';

    SET @UpdateExistingRecordsString = '
        UPDATE  [main].[{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}]
        SET
            {{#source.date_columns}}[{{name_without_spaces}}] = Tmp.[{{name_without_spaces}}],{{/source.date_columns}}{{#columns}}[{{name_without_spaces}}] = Tmp.[{{name_without_spaces}}]{{^last}},{{/last}}{{/columns}}
        From [dbo].[extTmp'+ CONVERT(varchar(255), @myid)  +'] Tmp 
        WHERE {{#source.primary_keys}}[main].[{{source.database}}_{{source.schema}}_{{template_config.variables.source_tablename_formatted}}].{{name_without_spaces}} = Tmp.{{name_without_spaces}}{{/source.primary_keys}} 
        OPTION(LABEL = ''UpdateRows_' + CONVERT(varchar(255), @myid) + '''); 
    ';

    SET @FindRowCountsString = '
        SELECT @RowsAffected = t1.[NumInserts] + t2.[NumUpdates]
        FROM 
            (
                SELECT max(row_count) as [NumInserts]
                FROM sys.dm_pdw_request_steps rs
                JOIN sys.dm_pdw_exec_requests r ON rs.request_id = r.request_id 
                WHERE r.[label] = ''InsertNewRows_' + CONVERT(varchar(255), @myid) + '''
            ) t1,
            (
                SELECT  max(row_count) as [NumUpdates]
                FROM sys.dm_pdw_request_steps rs
                JOIN sys.dm_pdw_exec_requests r ON rs.request_id = r.request_id 
                WHERE r.[label] = ''UpdateRows_' + CONVERT(varchar(255), @myid) + '''
            ) t2	
    ';

    EXEC sp_executesql @CreateExternalTableString;
    EXEC sp_executesql @CreateMainTableIfNotExistsString;
    EXEC sp_executesql @InsertNewRowsString;
    EXEC sp_executesql @UpdateExistingRecordsString;
    EXEC sp_executesql @DropExternalTableString;
    EXEC sp_executesql @FindRowCountsString, N'@RowsAffected int OUTPUT', @RowsAffected = @counts OUTPUT;
   
    SELECT @counts as 'Rows affected';

End 
GO
